<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
  "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
  
  <metadata name="de.openknowledge" value="OK checkstyle"/>

  <property name="severity" value="error"/>

  <module name="FileLength" >
    <property name="max" value="1500"/>
  </module> 
  <module name="FileTabCharacter"/>
 
  <module name="LineLength">
    <property name="ignorePattern" value="^ *\*"/>
    <property name="max" value="140"/>
  </module>
 
  <!-- new code conventions from checkstyle -->
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf"/>
  </module>

  <module name="RegexpHeader">
    <property name="headerFile" value="${checkstyle.header.file}"/>
  </module>

  <module name="RegexpSingleline">
    <!-- . matches any character, so we need to
      escape it and use \. to match dots. -->
    <property name="id" value="sysout"/>
    <property name="format" value="System\.out\."/>
    <property name="message" value="Illegal use of System.out. - use a logger instead!"/>
  </module>
  
  <module name="RegexpSingleline">
    <!-- . matches any character, so we need to
      escape it and use \. to match dots. -->
    <property name="id" value="syserr"/>
    <property name="format" value="System\.err\."/>
    <property name="message" value="Illegal use of System.err. - use a logger instead!"/>
  </module>
  
  <module name="RegexpSingleline">
    <!-- . matches any character, so we need to
      escape it and use \. to match dots. -->
    <property name="id" value="stacktrace"/>
    <property name="format" value="\.printStackTrace\(\)"/>
    <property name="message" value="Illegal use of [exception].printStackTrace() - use a logger instead!"/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <module name="SeverityMatchFilter">
    <property name="severity" value="info"/>
    <property name="acceptOnMatch" value="false"/>
  </module>
 
  <module name="Translation"/>
 
  <module name="TreeWalker">
    
    <property name="tabWidth" value="2" />
    
    <module name="ArrayTypeStyle"/>
    <module name="AvoidNestedBlocks"/>
    <module name="AvoidStarImport"/>

    <module name="BooleanExpressionComplexity"/>
    
    <module name="ConstantName">
      <property name="format" value="^[A-Z]+(_[A-Z]+)*$"/>
    </module>
    <module name="CovariantEquals"/>
    <module name="CyclomaticComplexity">
      <property name="severity" value="ignore"/>
    </module>

    <module name="DeclarationOrder"/>
    <module name="DefaultComesLast"/>
 
    <module name="EmptyBlock">
      <property name="option" value="text"/>
      <property name="tokens" value="LITERAL_CATCH"/>
    </module>
    <module name="EmptyBlock">
      <property name="tokens" value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_FOR,LITERAL_TRY,LITERAL_WHILE,INSTANCE_INIT,STATIC_INIT"/>
    </module>
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>

    <module name="FinalClass"/>
 
    <module name="GenericWhitespace"/>

    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
      <property name="ignoreAbstractMethods" value="true"/>
    </module>

    <module name="IllegalImport"/>
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean,java.lang.Integer,java.lang.Long"/>
    </module>
    <module name="IllegalThrows"/>
    <module name="ImportOrder">
      <property name="groups" value="java,javax,org,com,io"/>
      <property name="separated" value="true"/>
      <property name="option" value="top"/>
    </module>
	<module name="Indentation">
	  <property name="basicOffset" value="2"/>
	  <property name="braceAdjustment" value="0"/>
	  <property name="caseIndent" value="2"/>
	  <property name="throwsIndent" value="4"/>
	  <property name="arrayInitIndent" value="2"/>
	  <property name="lineWrappingIndentation" value="2"/>
	  <property name="forceStrictCondition" value="true"/>
	</module>
    <module name="InnerAssignment"/>
    <module name="InnerTypeLast"/>
    <module name="InterfaceIsType"/>
  
    <module name="LeftCurly" />    
    <module name="LocalFinalVariableName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>

    <module name="MemberName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    <module name="MethodLength">
      <property name="id" value="methodlength"/>
      <property name="countEmpty" value="false"/>
      <property name="max" value="40"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    <module name="MethodParamPad"/>
    <module name="MissingOverride"/>
    <module name="MissingSwitchDefault"/>    
    <module name="ModifierOrder"/>
    <module name="MultipleVariableDeclarations"/>

    <module name="NeedBraces"/>
    <module name="NestedForDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedIfDepth">
      <property name="max" value="3"/>
    </module>
    <module name="NestedTryDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS, TYPECAST"/>
    </module>
    <module name="NoWhitespaceBefore"/>

    <module name="OperatorWrap"/>

    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z]+)+$"/>
    </module>    
    <module name="ParameterName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    <module name="ParameterNumber" />
    <module name="ParenPad"/>    
  
    <module name="RedundantImport"/>
    <module name="RedundantModifier"/>
    <module name="RightCurly" />    
    
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StaticVariableName">
      <property name="format" value="^[a-z]+([A-Z][a-z]+)*$"/>
    </module>
    <module name="StringLiteralEquality"/>

    <module name="TodoComment"/>
    <module name="TypeName">
      <property name="format" value="^([A-Z][a-z]+)+$"/>
    </module>
    <module name="TypecastParenPad"/>

    <module name="UncommentedMain"/>
    <module name="UnusedImports"/>
    <module name="UpperEll"/>

    <module name="VisibilityModifier">
      <property name="packageAllowed" value="true"/>
      <property name="protectedAllowed" value="true"/>
    </module>

    <module name="WhitespaceAfter">
      <property name="tokens" value="COMMA, SEMI"/>
    </module>
    <module name="WhitespaceAround">
      <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
    </module>
  </module>

</module>
